player = {}
player.__index = player

function player.make(number)
	local p = {}
	setmetatable(p,player)
	p.x,p.y = screen:getCentre('x'),screen:getCentre('y')
	p.number = number
	p.members = {}
		p.members.a = {}
			p.members.a.x = screen:getCentre('x')
			p.members.a.y = screen:getCentre('y')
			p.members.a.x_vol = 0
			p.members.a.y_vol = 0
			p.members.a.forces = {}
			p.members.a.points = 0
			p.members.a.stats = {hp = 16}
			p.members.a.hp = 16
			p.members.a.immunity = 0
			p.members.a.lives = 3
			p.members.a.tether = false
			p.members.a.perks = {}
			p.members.a.target = {rot = 0, scale = 1}
		p.members.b = {}
			p.members.b.x = screen:getCentre('x')
			p.members.b.y = screen:getCentre('y')
			p.members.b.x_vol = 0
			p.members.b.y_vol = 0
			p.members.b.forces = {}
			p.members.b.points = 0
			p.members.b.stats = {hp = 16}
			p.members.b.hp = 16
			p.members.b.immunity = 0
			p.members.b.lives = 3
			p.members.b.tether = false
			p.members.b.perks = {}
			p.members.b.target = {rot = 0, scale = 1}
	p.points = 0
	p.tether = false
	p.stats = {hp = 16}
	p.hp = 16
	p.immunity = 0
	p.lives = 3
	p.dead = false
	p.distance = 100
	p.tetherDistance = 100
	p.image = res.load("sprite","player.png")
	p.target = {rot = 0, scale = 1}
	if not love.joystick.isOpen(number) then love.joystick.open(number) end
	return p
end

function player:push(member,x,y)
	table.insert(self.members[member].forces, {((x or 0)^2+(y or 0)^2)^(.5),math.atan2(y or 0,x or 0)})
end

function player:closest(x,y)
	if ((self.members.a.x-x)^2+(self.members.a.y-y)^2)^(.5) <= ((self.members.b.x-x)^2+(self.members.b.y-y)^2)^(.5) then
		return self.members.a.x,self.members.a.y
	else
		return self.members.b.x,self.members.b.y
	end
end

function player:draw()

	if self.members.a.tether and self.members.b.tether then
		if self.distance <= self.tetherDistance then
			love.graphics.setLineWidth(math.floor(24-24*self.distance/self.tetherDistance))
			love.graphics.setColor(158,3,152)
			love.graphics.line(self.members.a.x,self.members.a.y,self.members.b.x,self.members.b.y)
		end
	else
		if self.distance <= self.tetherDistance then
			love.graphics.setLineWidth(3)
			love.graphics.setColor(180,0,180,52)
			love.graphics.line(self.members.a.x,self.members.a.y,self.members.b.x,self.members.b.y)
		end
		love.graphics.setLineWidth(1)
		love.graphics.setColor(255,0,0,26)
		love.graphics.line(self.members.a.x,self.members.a.y,self.members.b.x,self.members.b.y)
	end

	--------------
	-- A member --
	--------------
		local rot = math.atan2(love.joystick.getAxis(self.number,1),-love.joystick.getAxis(self.number,2))
	if love.joystick.getAxis(self.number,1) == 0 and love.joystick.getAxis(self.number,2) == 0 then
		if self.distance < self.tetherDistance then
			love.graphics.setColor(255,255,255,(4-self.target.scale)*255/3)
			love.graphics.drawq(self.image,res.quads["player3"],self.members.a.x,self.members.a.y,0,1,1,24,24)
		end
		love.graphics.setColor(100,100,255,255-math.random(0,math.max(0,self.members.a.immunity*255)))
		love.graphics.drawq(self.image,res.quads["player1"],self.members.a.x,self.members.a.y,0,1,1,24,24)
	else
		if self.distance < self.tetherDistance then
			love.graphics.setColor(255,255,255,(4-self.target.scale)*255/3)
			love.graphics.drawq(self.image,res.quads["player4"],self.members.a.x,self.members.a.y,rot,1,1,24,24)
		end
		love.graphics.setColor(100,100,255,255-math.random(0,math.max(0,self.immunity*255)))
		love.graphics.drawq(self.image,res.quads["player2"],self.members.a.x,self.members.a.y,rot,1,1,24,24)
	end
	if self.members.a.hp <= self.members.a.stats.hp/4 and self.members.a.hp > self.members.a.stats.hp/8 then love.graphics.print("Low HP",self.members.a.x+12,self.members.a.y-26) end
	if self.members.a.hp <= self.members.a.stats.hp/8 then love.graphics.print("Very Low HP!",self.members.a.x+12,self.members.a.y-26) end

	--------------
	-- B member --
	--------------
		rot = math.atan2(love.joystick.getAxis(self.number,3),-love.joystick.getAxis(self.number,4))
	if love.joystick.getAxis(self.number,3) == 0 and love.joystick.getAxis(self.number,4) == 0 then
		if self.distance < self.tetherDistance then
			love.graphics.setColor(255,255,255,(4-self.target.scale)*255/3)
			love.graphics.drawq(self.image,res.quads["player3"],self.members.b.x,self.members.b.y,0,1,1,24,24)
		end
		love.graphics.setColor(255,100,100,255-math.random(0,math.max(0,self.members.b.immunity*255)))
		love.graphics.drawq(self.image,res.quads["player1"],self.members.b.x,self.members.b.y,0,1,1,24,24)
	else
		if self.distance < self.tetherDistance then
			love.graphics.setColor(255,255,255,(4-self.target.scale)*255/3)
			love.graphics.drawq(self.image,res.quads["player4"],self.members.b.x,self.members.b.y,rot,1,1,24,24)
		end
		love.graphics.setColor(255,100,100,255-math.random(0,math.max(0,self.immunity*255)))
		love.graphics.drawq(self.image,res.quads["player2"],self.members.b.x,self.members.b.y,rot,1,1,24,24)
	end
	if self.members.b.hp <= self.members.b.stats.hp/4 and self.members.b.hp > self.members.b.stats.hp/8 then love.graphics.print("Low HP",self.members.b.x+12,self.members.b.y-26) end
	if self.members.b.hp <= self.members.b.stats.hp/8 then love.graphics.print("Very Low HP!",self.members.b.x+12,self.members.b.y-26) end
	
	--------------
	
	love.graphics.rectangle('line',self.members.a.x-16,self.members.a.y-16,32,32)
	love.graphics.rectangle('line',self.members.b.x-16,self.members.b.y-16,32,32)
end

function player:update()
	self.distance = ((self.members.a.x-self.members.b.x)^2+(self.members.a.y-self.members.b.y)^2)^(.5)
	for i,f in ipairs(self.members.a.forces) do self.members.a.x_vol = self.members.a.x_vol + math.cos(f[2])*f[1] end
	for i,f in ipairs(self.members.a.forces) do self.members.a.y_vol = self.members.a.y_vol + math.sin(f[2])*f[1] end
	for i,f in ipairs(self.members.b.forces) do self.members.b.x_vol = self.members.b.x_vol + math.cos(f[2])*f[1] end
	for i,f in ipairs(self.members.b.forces) do self.members.b.y_vol = self.members.b.y_vol + math.sin(f[2])*f[1] end
	self.members.a.x = self.members.a.x + self.members.a.x_vol
	self.members.a.y = self.members.a.y + self.members.a.y_vol
	self.members.b.x = self.members.b.x + self.members.b.x_vol
	self.members.b.y = self.members.b.y + self.members.b.y_vol
	
	

	--------------
	-- A member --
	--------------
	if love.joystick.isDown(self.number,5) then self.members.a.tether = true else self.members.a.tether = false end
	if love.joystick.getAxis(self.number,1) ~= 0 then self.members.a.x = self.members.a.x + love.joystick.getAxis(self.number,1)*4 end--x
	if love.joystick.getAxis(self.number,2) ~= 0 then self.members.a.y = self.members.a.y + love.joystick.getAxis(self.number,2)*4 end--y
	if self.members.a.x < 0 or self.members.a.x > screen.width then self:push('a',10) end
	if self.members.a.y < 0 or self.members.a.y > screen.height then self:push('a',0,10) end
	if self.members.a.hp <= self.members.a.stats.hp/4 and self.members.a.hp > self.stats.hp/8 and not screen.flashing then screen:flash(-1,8,{255,0,0},"edge") end
	if self.members.a.hp <= self.members.a.stats.hp/8 and not screen.flashing then screen:flash(-1,4,{255,0,0},"edge") end
	if self.members.a.hp <= self.members.a.stats.hp/8 and math.random(1,3) == 2 then screen:aberate(math.random(1,3),math.random(0,2)) end
	if self.members.a.hp <= 0 then self.members.a.lives = self.members.a.lives - 1; self.members.a.hp = self.members.a.stats.hp; self.members.a.points = math.max(0,self.members.a.points-100)
		screen:shake(1,12)
		for ii=1, math.min(self.points,100) do
			table.insert(state.crystals, crystal.make(self.members.a.x+math.random(-48,48),self.members.a.y+math.random(-48,48)))
		end
		messages:new("Player "..self.number.." died",self.members.a.x,self.members.a.y,'up',-1,{0,128,90})
		self.members.a.x,self.members.a.y = screen:getCentre('x'),screen:getCentre('y')
		self.members.a.immunity = 18
	end
	
	if self.members.a.target.rot < math.pi*2 then
		self.members.a.target.rot = self.members.a.target.rot+(math.pi/120)
	else
		self.members.a.target.rot = 0
	end
	if self.members.a.target.scale > 1 then
		self.members.a.target.scale = self.members.a.target.scale - .2
	end
	
	if self.members.a.immunity > 0 then self.members.a.immunity = self.members.a.immunity - .1;else self.members.a.immunity = 0 end
--	if self.members.a.lives == 0 then self.dead = true end

	--------------
	-- B member --
	--------------
	if love.joystick.isDown(self.number,5) then self.members.b.tether = true else self.members.b.tether = false end
	if love.joystick.getAxis(self.number,3) ~= 0 then self.members.b.x = self.members.b.x + love.joystick.getAxis(self.number,3)*4 end--x
	if love.joystick.getAxis(self.number,4) ~= 0 then self.members.b.y = self.members.b.y + love.joystick.getAxis(self.number,4)*4 end--y
	if self.members.b.x < 0 or self.members.b.x > screen.width then self:push('a',-self.members.b.x_vol) end
	if self.members.b.y < 0 or self.members.b.y > screen.height then self:push('a',0,-self.members.b.y_vol) end
	if self.members.b.hp <= self.members.b.stats.hp/4 and self.members.b.hp > self.stats.hp/8 and not screen.flashing then screen:flash(-1,8,{255,0,0},"edge") end
	if self.members.b.hp <= self.members.b.stats.hp/8 and not screen.flashing then screen:flash(-1,4,{255,0,0},"edge") end
	if self.members.b.hp <= self.members.b.stats.hp/8 and math.random(1,3) == 2 then screen:aberate(math.random(1,3),math.random(0,2)) end
	if self.members.b.hp <= 0 then self.members.b.lives = self.members.b.lives - 1; self.members.b.hp = self.members.b.stats.hp; self.members.b.points = math.max(0,self.members.b.points-100)
		screen:shake(1,12)
		for ii=1, math.min(self.points,100) do
			table.insert(state.crystals, crystal.make(self.members.b.x+math.random(-48,48),self.members.b.y+math.random(-48,48)))
		end
		messages:new("Player "..self.number.." died",self.members.b.x,self.members.b.y,'up',-1,{0,128,90})
		self.members.b.x,self.members.b.y = screen:getCentre('x'),screen:getCentre('y')
		self.members.b.immunity = 18
	end
	
	if self.members.b.target.rot < math.pi*2 then
		self.members.b.target.rot = self.members.b.target.rot+(math.pi/120)
	else
		self.members.b.target.rot = 0
	end
	if self.members.b.target.scale > 1 then
		self.members.b.target.scale = self.members.b.target.scale - .2
	end
	
	if self.members.b.immunity > 0 then self.members.b.immunity = self.members.b.immunity - .1;else self.members.b.immunity = 0 end
--	if self.members.b.lives == 0 then self.dead = true end

	------------
	-- Tether --
	------------
	local tetherSrength = (math.floor(24-24*self.distance/self.tetherDistance))/12
	if self.members.a.tether and self.members.b.tether then
		if self.distance <= self.tetherDistance then
			for i,e in ipairs(state.enemies) do
				if math.checkIntersect({x=self.members.a.x,y=self.members.a.y},{x=self.members.b.x,y=self.members.b.y},{x=e.x-e.r,y=e.y-e.r},{x=e.x+e.r,y=e.y+e.r}) or math.checkIntersect({x=self.members.a.x,y=self.members.a.y},{x=self.members.b.x,y=self.members.b.y},{x=e.x-e.r,y=e.y+e.r},{x=e.x+e.r,y=e.y-e.r}) then
					e.hp = e.hp - tetherSrength
				end
			end
			for i,r in ipairs(state.rocks) do
				if math.checkIntersect({x=self.members.a.x,y=self.members.a.y},{x=self.members.b.x,y=self.members.b.y},{x=r.x-r.r,y=r.y-r.r},{x=r.x+r.r,y=r.y+r.r}) or math.checkIntersect({x=self.members.a.x,y=self.members.a.y},{x=self.members.b.x,y=self.members.b.y},{x=r.x-r.r,y=r.y+r.r},{x=r.x+r.r,y=r.y-r.r}) then
					r.hp = r.hp - tetherSrength
				end
			end
		end
	end

	-------------
	-- Collide --
	-------------
	for i,b in ipairs(state.bullets) do
		if self.members.a.immunity == 0 and b.owner == 'enemy' and b.x >= self.members.a.x-12 and b.x <= self.members.a.x+12 and b.y >= self.members.a.y-12 and b.y <= self.members.a.y+12 then
			self.members.a.hp = self.members.a.hp - 1
			screen:shake(.5,4)
			screen:flash(16,1,{255,0,0},"edge")
			table.remove(state.bullets,i)
		end
		if self.members.a.immunity == 0 and b.owner == 'enemy' and b.x >= self.members.b.x-12 and b.x <= self.members.b.x+12 and b.y >= self.members.b.y-12 and b.y <= self.members.b.y+12 then
			self.members.b.hp = self.members.b.hp - 1
			screen:shake(.5,4)
			screen:flash(16,1,{255,0,0},"edge")
			table.remove(state.bullets,i)
		end
	end
	for i,c in ipairs(state.crystals) do
		if c.x >= self.members.a.x-12 and c.x <= self.members.a.x+12 and c.y >= self.members.a.y-12 and c.y <= self.members.a.y+12 then
			c.got = true
			self.members.a.points = self.members.a.points +1
		end
		if c.x >= self.members.b.x-12 and c.x <= self.members.b.x+12 and c.y >= self.members.b.y-12 and c.y <= self.members.b.y+12 then
			c.got = true
			self.members.b.points = self.members.b.points +1
		end
	end

	self.members.a.forces = {}
	self.members.b.forces = {}

end
